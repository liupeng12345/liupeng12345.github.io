<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker 安装</title>
      <link href="/2021/10/10/docker-an-zhuang/"/>
      <url>/2021/10/10/docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="dcoker-安装"><a href="#dcoker-安装" class="headerlink" title="dcoker 安装"></a>dcoker 安装</h2><h3 id="下载docker-hub"><a href="#下载docker-hub" class="headerlink" title="下载docker hub"></a>下载docker hub</h3><p>链接： [Download for Windows (docker.com)](<a href="https://desktop.docker.com/win/main/amd64/Docker">https://desktop.docker.com/win/main/amd64/Docker</a> Desktop Installer.exe?utm_source=docker&amp;utm_medium=webreferral&amp;utm_campaign=dd-smartbutton&amp;utm_location=header)</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>点击exe 安装即可软件</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010213539701.png" alt="image-20211010213539701"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><ol><li><p>docker 无法启动：</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010214413610.png" alt="image-20211010214413610"></p><p>无法pull ，客户端也提示关闭</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010214450132.png" alt="image-20211010214450132"></p><blockquote><p>解决办法：</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010214838904.png" alt="image-20211010214838904"></p><p>升级wsl</p><pre class=" language-shell"><code class="language-shell">wsl --update</code></pre></blockquote></li></ol></blockquote><h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h4><p><img src="/2021/10/10/docker-an-zhuang/image-20211010220009480.png" alt="image-20211010220009480"></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>配置国内镜像</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010220218955.png" alt="image-20211010220218955"></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"experimental"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"features"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"buildkit"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"builder"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"gc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"defaultKeepStorage"</span><span class="token operator">:</span> <span class="token string">"20GB"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完成设置</p><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><h4 id="使用-pip-安装"><a href="#使用-pip-安装" class="headerlink" title="使用 pip 安装"></a>使用 pip 安装</h4><pre class=" language-shell"><code class="language-shell">pip install docker-compose</code></pre><p><img src="/2021/10/10/docker-an-zhuang/image-20211010221020583.png" alt="image-20211010221020583"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-shell"><code class="language-shell">dcoker version</code></pre><p><img src="/2021/10/10/docker-an-zhuang/image-20211010221230495.png" alt="image-20211010221230495"></p><h3 id="安装mysql，redis-mongo"><a href="#安装mysql，redis-mongo" class="headerlink" title="安装mysql，redis, mongo"></a>安装mysql，redis, mongo</h3><h4 id="准备docker-compose-yml-文件"><a href="#准备docker-compose-yml-文件" class="headerlink" title="准备docker-compose.yml 文件"></a>准备docker-compose.yml 文件</h4><pre class=" language-yml"><code class="language-yml">version: '3'services:  mysql:    image: 'mysql'    environment:      MYSQL_ROOT_PASSWORD: root    container_name: "mysql"    restart: always    ports:    - 3306:3306  redis:    image: 'redis'    container_name: "redis"    restart: always    ports:    - 6379:6379  mongo:    image: 'mongo'    environment:      MONGO_INITDB_ROOT_USERNAME: root      MONGO_INITDB_ROOT_PASSWORD: 123456    container_name: "mongo"    restart: always    ports:    - 27017:27017</code></pre><h4 id="使用vscode-管理-docker-compose-yml"><a href="#使用vscode-管理-docker-compose-yml" class="headerlink" title="使用vscode 管理 docker-compose.yml"></a>使用vscode 管理 docker-compose.yml</h4><h5 id="安装docker-插件"><a href="#安装docker-插件" class="headerlink" title="安装docker 插件"></a>安装docker 插件</h5><p><img src="/2021/10/10/docker-an-zhuang/image-20211010222200527.png" alt="image-20211010222200527"></p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010222237567.png" alt="image-20211010222237567"></p><h4 id="使用命令后台启动mysql，redis，mongo"><a href="#使用命令后台启动mysql，redis，mongo" class="headerlink" title="使用命令后台启动mysql，redis，mongo"></a>使用命令后台启动mysql，redis，mongo</h4><pre class=" language-shell"><code class="language-shell">docker-compose update -d</code></pre><p>启动完成</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010223024000.png" alt="image-20211010223024000"></p><h4 id="测试连接，使用datagrip，rdm"><a href="#测试连接，使用datagrip，rdm" class="headerlink" title="测试连接，使用datagrip，rdm"></a>测试连接，使用datagrip，rdm</h4><h5 id="测试mysql"><a href="#测试mysql" class="headerlink" title="测试mysql"></a>测试mysql</h5><p><img src="/2021/10/10/docker-an-zhuang/image-20211010234701383.png" alt="image-20211010234701383"></p><p>测试mongo</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010235032591.png" alt="image-20211010235032591"></p><p>测试redis</p><p><img src="/2021/10/10/docker-an-zhuang/image-20211010235046399.png" alt="image-20211010235046399"></p>]]></content>
      
      
      <categories>
          
          <category> dcoker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antlr4开发环境</title>
      <link href="/2021/10/07/antlr4-kai-fa-huan-jing/"/>
      <url>/2021/10/07/antlr4-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="ANTLR4"><a href="#ANTLR4" class="headerlink" title="ANTLR4"></a>ANTLR4</h3><h4 id="idea-安装ANTLR插件"><a href="#idea-安装ANTLR插件" class="headerlink" title="idea 安装ANTLR插件"></a>idea 安装ANTLR插件</h4><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922103833759.png" alt="image-20210922103833759"></p><p>导包</p><pre class=" language-groovy"><code class="language-groovy">    implementation <span class="token string">'org.antlr:antlr4-runtime:4.9.2'</span></code></pre><p>创建g4 文件</p><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922104259116.png" alt="image-20210922104259116"></p><p>测试语法规则</p><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922104401300.png" alt="image-20210922104401300"></p><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922104540793.png" alt="image-20210922104540793"></p><p>生成代码</p><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922104638706.png" alt="image-20210922104638706"></p><p>测试代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* g4 测试测试代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 从字符串中获取charStream</span>        <span class="token keyword">final</span> CodePointCharStream stream <span class="token operator">=</span> CharStreams<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新建一个词法解析器，处理 charStream</span>        <span class="token keyword">final</span> HelloLexer helloLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloLexer</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新建一个词法符号的缓冲区，用于存储词法分析器将生成的词法符号</span>        <span class="token keyword">final</span> CommonTokenStream tokenStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonTokenStream</span><span class="token punctuation">(</span>helloLexer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新建一个语法分析器，处理词法符号缓冲区的内容</span>        <span class="token keyword">final</span> HelloParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloParser</span><span class="token punctuation">(</span>tokenStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 针对 r 规则开始语法分析</span>        <span class="token keyword">final</span> HelloParser<span class="token punctuation">.</span>RContext context <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">toStringTree</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果</p><pre class=" language-json"><code class="language-json">> Task <span class="token operator">:</span>Main.main(<span class="token punctuation">)</span>(r hello world<span class="token punctuation">)</span></code></pre><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922114054034.png" alt="image-20210922114054034"></p><h4 id="g4-文件"><a href="#g4-文件" class="headerlink" title="g4 文件"></a>g4 文件</h4><h5 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h5><pre class=" language-g4"><code class="language-g4">grammar Name;options {...}import ...;tokens {...}@actionName {...}<<rule1>>...<<rule2>></code></pre><blockquote><ol><li><p><strong>grammar Name</strong> 这是词法跟语法都在同一个文件声明的写法，称之为<strong>combined</strong>。若要分开，可以使用lexer grammar Name和parser grammar Name。</p></li><li><p><strong>options</strong> 可以是如下四个选项。</p><p>superClass：用于生成xxxLexer.java、xxxParser.java的父类<br>language：目标语句，如java<br>tokenVocab：toekn词库<br>TokenLabelType：默认的是antlr的Token类型，这里可以使用自定义的token类，如MyToken。需要配合TokenFactory使用</p></li><li><p><strong>import</strong> 可以导入各个独立的lexer、parser文件，只能用于<strong>combined</strong>写法。</p></li><li><p><strong>actionName</strong> 可以是如下内容</p><p>@header：定义类文件头。比如嵌入java的package、import声明<br>@member：定义类文件内容。比如类成员、方法</p></li></ol></blockquote><h5 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h5><p>监听器提供了两类方法，enter/exit 方法</p><p><img src="/2021/10/07/antlr4-kai-fa-huan-jing/image-20210922131416973.png" alt="image-20210922131416973"></p><h5 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h5><h6 id="抽离词法分析器"><a href="#抽离词法分析器" class="headerlink" title="抽离词法分析器"></a>抽离词法分析器</h6><pre class=" language-java"><code class="language-java">lexer grammar CommonLexerRules<span class="token punctuation">;</span></code></pre><p>导入</p><pre><code>lexer grammar CommonLexerRules;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 语法解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> ANTLR4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis plus 多租户</title>
      <link href="/2021/09/19/mybatis-plus-duo-zu-hu/"/>
      <url>/2021/09/19/mybatis-plus-duo-zu-hu/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-plus-多租户"><a href="#Mybatis-plus-多租户" class="headerlink" title="Mybatis plus 多租户"></a>Mybatis plus 多租户</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>官网： <a href="https://baomidou.com/guide/">简介 | MyBatis-Plus (baomidou.com)</a></p><h4 id="官方多租户使用"><a href="#官方多租户使用" class="headerlink" title="官方多租户使用"></a>官方多租户使用</h4><p>mybatis plus 官方多租户使用方法，是通过实现TenantLineHandler 接口，实现tenantId的获取方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TenantLineHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取租户 ID 值表达式，只支持单个 ID 值     * &lt;p>     *     * @return 租户 ID 值表达式     */</span>    Expression <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取租户字段名     * &lt;p>     * 默认字段名叫: tenant_id     *     * @return 租户字段名     */</span>    <span class="token keyword">default</span> String <span class="token function">getTenantIdColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"tenant_id"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据表名判断是否忽略拼接多租户条件     * &lt;p>     * 默认都要进行解析并拼接多租户条件     *     * @param tableName 表名     * @return 是否忽略, true:表示忽略，false:需要解析并拼接多租户条件     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">ignoreTable</span><span class="token punctuation">(</span>String tableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用时，在MybatisPlusInterceptor里使用配置上即可</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TenantLineInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TenantLineHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Expression <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LongValue</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最简单实现</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>H2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="官方多租户实现原理"><a href="#官方多租户实现原理" class="headerlink" title="官方多租户实现原理"></a>官方多租户实现原理</h4><p>mybatis plus 官方实现是使用jsqlparser解析sql成语法树，在JsqlParserSupport抽象类中对sql类型的判断，然后进行不同的处理。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 执行 SQL 解析 * * @param statement JsqlParser Statement * @return sql */</span><span class="token keyword">protected</span> String <span class="token function">processParser</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"SQL to parse, SQL: "</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token keyword">instanceof</span> <span class="token class-name">Insert</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processInsert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Insert<span class="token punctuation">)</span> statement<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token keyword">instanceof</span> <span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processSelect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span> statement<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token keyword">instanceof</span> <span class="token class-name">Update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Update<span class="token punctuation">)</span> statement<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token keyword">instanceof</span> <span class="token class-name">Delete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processDelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Delete<span class="token punctuation">)</span> statement<span class="token punctuation">,</span> index<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sql <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"parse the finished SQL: "</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sql<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在mybatis plus的 TenantLineInnerInterceptor 中 继承了JsqlParserSupport 并实现了4种sql的处理方法， 实现了InnerInterceptor 中的beforeQuery（查询） 和 beforePrepare（增加、删除、更新）。</p><h4 id="官方多租户缺陷"><a href="#官方多租户缺陷" class="headerlink" title="官方多租户缺陷"></a>官方多租户缺陷</h4><p>jsqlparser 对sql 要求比较严格，在 join 语句的处理上存在限制</p><p><img src="/2021/09/19/mybatis-plus-duo-zu-hu/image-20210917111321368.png" alt="image-20210917111321368"></p><p>官方文档中也对此做出了说明</p><p><img src="/2021/09/19/mybatis-plus-duo-zu-hu/image-20210918162012131.png" alt="image-20210918162012131"></p><h4 id="多租户sql处理-的优化"><a href="#多租户sql处理-的优化" class="headerlink" title="多租户sql处理 的优化"></a>多租户sql处理 的优化</h4><p>改用 druid 对sql 进行处理</p><h5 id="解析sql"><a href="#解析sql" class="headerlink" title="解析sql"></a>解析sql</h5><p>自定义sql的解析方法</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">parserSingle</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">deBug</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"original"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>        start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        H2StatementParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H2StatementParser</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLStatement stmt <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">processParser</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> String <span class="token function">processParser</span><span class="token punctuation">(</span>SQLStatement stmt<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查询语句</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SQLSelectStatement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processSelect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SQLSelectStatement<span class="token punctuation">)</span> stmt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新语句</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SQLUpdateStatement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SQLUpdateStatement<span class="token punctuation">)</span> stmt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//删除语句</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SQLDeleteStatement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processDelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SQLDeleteStatement<span class="token punctuation">)</span> stmt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//插入语句</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SQLInsertStatement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processInsert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SQLInsertStatement<span class="token punctuation">)</span> stmt<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String sql <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deBug</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"after process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String replaceSql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tenantLineHandler<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deBug</span><span class="token punctuation">(</span>replaceSql<span class="token punctuation">,</span> <span class="token string">"replaceSql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> replaceSql<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionSqlParserInnerInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">DruidParserSupport</span> <span class="token keyword">implements</span> <span class="token class-name">InnerInterceptor</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="insert-、update-、delete-处理"><a href="#insert-、update-、delete-处理" class="headerlink" title="insert 、update 、delete 处理"></a>insert 、update 、delete 处理</h5><p>使用druid提供api，轻松搞定</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processInsert</span><span class="token punctuation">(</span>SQLInsertStatement insert<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>SQLInsertStatement<span class="token punctuation">.</span>ValuesClause<span class="token operator">></span> valuesList <span class="token operator">=</span> insert<span class="token punctuation">.</span><span class="token function">getValuesList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        insert<span class="token punctuation">.</span><span class="token function">addColumn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SQLIdentifierExpr</span><span class="token punctuation">(</span>TABLE_FIELD_TENANT_ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valuesList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>valuesClause <span class="token operator">-</span><span class="token operator">></span> valuesClause<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processDelete</span><span class="token punctuation">(</span>SQLDeleteStatement delete<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String alias <span class="token operator">=</span> delete<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SQLName tableName <span class="token operator">=</span> delete<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SourceFromInfo fromInfo <span class="token operator">=</span> SourceFromInfo<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span>tableName<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SQLBinaryOpExpr tenantIdCondition <span class="token operator">=</span> SqlParseUtil<span class="token punctuation">.</span><span class="token function">generateTenantIdCondition</span><span class="token punctuation">(</span>fromInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        delete<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span><span class="token function">processWhereSubQuery</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delete<span class="token punctuation">.</span><span class="token function">addCondition</span><span class="token punctuation">(</span>tenantIdCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processUpdate</span><span class="token punctuation">(</span>SQLUpdateStatement update<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SQLName tableName <span class="token operator">=</span> update<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SourceFromInfo fromInfo <span class="token operator">=</span> SourceFromInfo<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span>tableName<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SQLBinaryOpExpr tenantIdCondition <span class="token operator">=</span> SqlParseUtil<span class="token punctuation">.</span><span class="token function">generateTenantIdCondition</span><span class="token punctuation">(</span>fromInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        update<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span><span class="token function">processWhereSubQuery</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        update<span class="token punctuation">.</span><span class="token function">addCondition</span><span class="token punctuation">(</span>tenantIdCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="select语句的处理"><a href="#select语句的处理" class="headerlink" title="select语句的处理"></a>select语句的处理</h5><p>对select 语句的 查询字段列表、from 语句、where 语句 进行分开处理，只要在其中遇到子查询就递归处理</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>String<span class="token operator">></span> tableList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 处理查询字段中的子查询</span>        <span class="token function">processSelectList</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理from语句</span>        <span class="token function">processFrom</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> tableList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理where 条件</span>        <span class="token function">processWhere</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> tableList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在主select 语句中对 on 语句 和 where 语句中添加租户条件</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 处理on的sql     *     * @param joinFrom     * @param tableList     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processFromOn</span><span class="token punctuation">(</span>SQLJoinTableSource joinFrom<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> tableList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SQLExprTableSource fromRight <span class="token operator">=</span> <span class="token punctuation">(</span>SQLExprTableSource<span class="token punctuation">)</span> joinFrom<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SourceFromInfo fromInfo <span class="token operator">=</span> SourceFromInfo                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span>fromRight<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span>fromRight<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SQLBinaryOpExpr condition <span class="token operator">=</span> SqlParseUtil<span class="token punctuation">.</span><span class="token function">generateTenantIdCondition</span><span class="token punctuation">(</span>fromInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>joinFrom<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            joinFrom<span class="token punctuation">.</span><span class="token function">addCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>            tableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>SqlParseUtil<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span>fromRight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>已经在 on里 添加了过的，不需要在where里添加</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doProcessWhere</span><span class="token punctuation">(</span>SQLSelectQueryBlock select<span class="token punctuation">,</span> SQLExpr where<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> tableList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> SQLTableSource from <span class="token operator">=</span> select<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>SourceFromInfo<span class="token operator">></span> tableNameList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getTableNames</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> tableNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableNameList <span class="token operator">=</span> tableNameList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>next <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>tableList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tableList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据多个表名获取拼接条件</span>        SQLBinaryOpExpr conditionByTableName <span class="token operator">=</span> <span class="token function">generateWhereConditionByTableList</span><span class="token punctuation">(</span>tableNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>        where <span class="token operator">=</span> SqlParseUtil<span class="token punctuation">.</span><span class="token function">generateCondition</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span> conditionByTableName<span class="token punctuation">,</span> SQLBinaryOperator<span class="token punctuation">.</span>BooleanAnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        select<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="解析优化"><a href="#解析优化" class="headerlink" title="解析优化"></a>解析优化</h5><p>使用本地缓存对sql解析结果进行保存，因为此时处理的sql为预编译的sql，参数还是 ？占位符，使用缓存可以大大优化同类sql的解析</p><p>效率</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 处理基本查询     *     * @param     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPlainSelect</span><span class="token punctuation">(</span>SQLSelectQueryBlock select<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String sql <span class="token operator">=</span> select<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SQLSelectQueryBlock sqlSelectQueryBlock <span class="token operator">=</span> selectCache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sqlSelectQueryBlock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"使用了缓存---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            select<span class="token punctuation">.</span><span class="token function">setCachedSelectList</span><span class="token punctuation">(</span>sqlSelectQueryBlock<span class="token punctuation">.</span><span class="token function">getCachedSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sqlSelectQueryBlock<span class="token punctuation">.</span><span class="token function">getCachedSelectListHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            select<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sqlSelectQueryBlock<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            select<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>sqlSelectQueryBlock<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> tableList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理查询字段中的子查询</span>        <span class="token function">processSelectList</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理from语句</span>        <span class="token function">processFrom</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> tableList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理where 条件</span>        <span class="token function">processWhere</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> tableList<span class="token punctuation">)</span><span class="token punctuation">;</span>        selectCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> select<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用缓存后造成的问题，因为不同租户添加的租户id 不同，使用缓存会拿到错误的租户id，解决办法，先用一个不存在的租户占位，然后解析完后，在进行租户替换。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> SQLBinaryOpExpr <span class="token function">generateTenantIdCondition</span><span class="token punctuation">(</span>SourceFromInfo tableNameInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SQLBinaryOpExpr tenantIdWhere <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLBinaryOpExpr</span><span class="token punctuation">(</span>MYSQL_STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tableNameInfo<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拼接新的条件</span>            tenantIdWhere<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SQLPropertyExpr</span><span class="token punctuation">(</span>tableNameInfo<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TABLE_FIELD_TENANT_ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置当前租户ID条件</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拼接别名条件</span>            tenantIdWhere<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SQLPropertyExpr</span><span class="token punctuation">(</span>tableNameInfo<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TABLE_FIELD_TENANT_ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tenantIdWhere<span class="token punctuation">.</span><span class="token function">setOperator</span><span class="token punctuation">(</span>SQLBinaryOperator<span class="token punctuation">.</span>Equality<span class="token punctuation">)</span><span class="token punctuation">;</span>        tenantIdWhere<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SQLIntegerExpr</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 租户的占位</span>        <span class="token keyword">return</span> tenantIdWhere<span class="token punctuation">;</span>    <span class="token punctuation">}</span> String sql <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deBug</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"after process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String replaceSql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tenantLineHandler<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deBug</span><span class="token punctuation">(</span>replaceSql<span class="token punctuation">,</span> <span class="token string">"replaceSql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><h6 id="测试select-sql"><a href="#测试select-sql" class="headerlink" title="测试select sql"></a>测试select sql</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> h <span class="token keyword">on</span> h<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>sex  <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">f</span> <span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">d</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token number">b</span>  <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token number">c</span> <span class="token number">c1</span>  <span class="token keyword">on</span> <span class="token number">c1</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>name  <span class="token keyword">where</span> id <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> g <span class="token keyword">where</span>  name <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> p</code></pre><p>解析后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token keyword">FROM</span> <span class="token number">a</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> h    <span class="token keyword">ON</span> h<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>sex        <span class="token operator">AND</span> h<span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token operator">*</span>        <span class="token keyword">FROM</span> <span class="token number">f</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span> <span class="token operator">*</span>                <span class="token keyword">FROM</span> <span class="token number">d</span>                <span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">)</span>        <span class="token keyword">WHERE</span> <span class="token number">f</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token number">b</span>    <span class="token keyword">ON</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>name    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token number">c</span> <span class="token number">c1</span>    <span class="token keyword">ON</span> <span class="token number">c1</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>name        <span class="token operator">AND</span> <span class="token number">c1</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token operator">*</span>        <span class="token keyword">FROM</span> g        <span class="token keyword">WHERE</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span> <span class="token operator">*</span>                <span class="token keyword">FROM</span> k                <span class="token keyword">WHERE</span> k<span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">)</span>            <span class="token operator">AND</span> g<span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">)</span>    <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> p<span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span></code></pre><p>第一次处理耗时 200-300ms</p><p>使用缓存后耗时 &lt;5ms</p><h6 id="测试-inertsql"><a href="#测试-inertsql" class="headerlink" title="测试 inertsql"></a>测试 inertsql</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span>  <span class="token punctuation">(</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>email <span class="token punctuation">)</span>  <span class="token keyword">VALUES</span>  <span class="token punctuation">(</span> ?<span class="token punctuation">,</span>?<span class="token punctuation">,</span>?<span class="token punctuation">,</span>? <span class="token punctuation">)</span></code></pre><p>解析后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">,</span> tenant_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h6 id="测试update-sql"><a href="#测试update-sql" class="headerlink" title="测试update sql"></a>测试update sql</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">user</span>  <span class="token keyword">SET</span> name<span class="token operator">=</span>?<span class="token punctuation">,</span>age<span class="token operator">=</span>?<span class="token punctuation">,</span>email<span class="token operator">=</span>? <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>age <span class="token operator">=</span> ?<span class="token punctuation">)</span></code></pre><p>解析后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> name <span class="token operator">=</span> ?<span class="token punctuation">,</span> age <span class="token operator">=</span> ?<span class="token punctuation">,</span> email <span class="token operator">=</span> ? <span class="token keyword">WHERE</span> age <span class="token operator">=</span> ? <span class="token operator">AND</span> <span class="token keyword">user</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span></code></pre><h6 id="测试delete-sql"><a href="#测试delete-sql" class="headerlink" title="测试delete sql"></a>测试delete sql</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>age <span class="token operator">=</span> ? <span class="token operator">AND</span> name <span class="token operator">=</span> ?<span class="token punctuation">)</span></code></pre><p>解析后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token keyword">WHERE</span> age <span class="token operator">=</span> ?    <span class="token operator">AND</span> name <span class="token operator">=</span> ?    <span class="token operator">AND</span> <span class="token keyword">user</span><span class="token punctuation">.</span>tenant_id <span class="token operator">=</span> <span class="token number">1</span></code></pre><h4 id="TenantLineHandler优化"><a href="#TenantLineHandler优化" class="headerlink" title="TenantLineHandler优化"></a>TenantLineHandler优化</h4><p>使用druid 后修改TenantLineHandler 的 直接返回long</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 获取租户 ID 值表达式，只支持单个 ID 值     * &lt;p>     *     * @return 租户 ID     */</span>    Long <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>tenant_id继续使用ThreadLocal实现,其余框架，需要设计拦截器，在拦截器中实现tenant_id的设置来实现无感知。</p><h4 id="WithoutTenant"><a href="#WithoutTenant" class="headerlink" title="@WithoutTenant"></a>@WithoutTenant</h4><p>可能有一些操作的sql 需要跨租户，可在方法上加上此注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">WithoutTenant</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WithoutTenantAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.convertlab.multitenancystater.annotation.WithoutTenant)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">doWithoutTenant</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String tenant <span class="token operator">=</span> TenantContext<span class="token punctuation">.</span><span class="token function">getCurrentTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TenantContext<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span>  proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            TenantContext<span class="token punctuation">.</span><span class="token function">setCurrentTenant</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybtais </tag>
            
            <tag> 多租户 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
